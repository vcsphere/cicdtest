name: Build Testapp

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# checkout sample actions pipeline with 2 or more environments (dev, test, prod)
# paraemeterise the pipeline to use the same pipeline for all environments

env:
  GAR_LOCATION: europe-west3
  GAR_NAME: artifact-registry-dev
  SERVICE: test-app
  REGION: europe-west3

jobs:
  build-testapp:
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - uses: "actions/checkout@v3"

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          # workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          # service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
          credentials_json: "${{secrets.GCP_APPENGINE_SA}}"

        # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

        # Authenticate Docker to Google Cloud Artifact Registry

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{env.GAR_NAME}}/${{ env.SERVICE }}:${{ github.sha }}" test-project/ 
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{env.GAR_NAME}}/${{ env.SERVICE }}:${{ github.sha }}"

        # END - Docker auth and build

  deploy-testapp-appengine:
    needs: build-testapp
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - uses: "actions/checkout@v3"

      - id: "deploy"
        uses: "google-github-actions/deploy-appengine@v1"
        with:
          project_id: "${{ secrets.GCP_PROJECT_ID }}"
          image_url: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

      # Example of using the output
      - id: "test"
        run: 'curl "${{ steps.deploy.outputs.url }}"'
