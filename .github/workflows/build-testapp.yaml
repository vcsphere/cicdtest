name: Build & deyploy Testapp

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GAR_LOCATION: europe-west3
  GAR_NAME: artifact-registry-dev
  SERVICE: test-app
  REGION: europe-west3

jobs:
  #build-testapp:
  # runs-on: ubuntu-latest
  #  steps:
  #    - uses: "actions/checkout@v3"

  #    - id: "auth"
  #      name: "Authenticate to Google Cloud"
  #      uses: "google-github-actions/auth@v1"
  #      with:
  #        credentials_json: "${{ secrets.GCP_APPENGINE_SA }}"

  # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

  # Authenticate Docker to Google Cloud Artifact Registry

  #    - name: Build and Push Container
  #      run: |-
  #        gcloud auth configure-docker \
  #        europe-west3-docker.pkg.dev
  #        docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{env.GAR_NAME}}/${{ env.SERVICE }}:${{ github.sha }}" test-project/
  #        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{env.GAR_NAME}}/${{ env.SERVICE }}:${{ github.sha }}"

  # END - Docker auth and build

  deploy-testapp-appengine:
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v3"

      #Checking if the app build successfully
      #  - name: npm install
      #    run: npm install && npm run build

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_APPENGINE_SA }}"

      - id: "deploy"
        uses: "google-github-actions/deploy-appengine@v1"
        with:
          project_id: "${{ secrets.GCP_PROJECT_ID }}"
          #    image_url: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{env.GAR_NAME}}/${{ env.SERVICE }}:${{ github.sha }}"
          #    working_directory: "test-project"
          deliverables: "../test-project/app.yaml"

      # Example of using the output
      - id: "test"
        run: 'curl "${{ steps.deploy.outputs.url }}"'
